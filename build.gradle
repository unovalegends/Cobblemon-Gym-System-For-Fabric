plugins {
    id "groovy"
    id "java"
    id "idea"
    id "signing"    
    id "com.github.johnrengelman.shadow" version "7.1.2" 
    id "fabric-loom" version "1.1-SNAPSHOT"      
	id "maven-publish"

    //id "net.minecrell.licenser" version "0.3"
}

group = "${getProjectProperty('m_group')}"
version = "${getProjectProperty('minecraft_version')}-${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}-${getProjectProperty('m_api')}-${getProjectProperty('m_suffix')}"
description = "${getProjectProperty('m_description')}"

if (System.getenv().BUILD_NUMBER != null) {
    version += "+${System.getenv().BUILD_NUMBER}"
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	//withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        name = "Gradle-Plugins"
        url = "https://plugins.gradle.org/m2"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    } 
     maven {
        name = "Guice"
        url = "https://mvnrepository.com/artifact/com.google.inject/guice"
    } 
    maven{
        name = "snakeyaml"
         url = "https://mvnrepository.com/artifact/org.yaml/snakeyaml"
    }     
    maven { 
        name = "me/lucko/fabric-permissions-api/0.2-SNAPSHOT/"
        url "https://oss.sonatype.org/content/repositories/snapshots" 
    } 
    maven {       
        name = "caffeine"
        url "https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine"
    }
    maven {       
        name = "gson"
        url "https://mvnrepository.com/artifact/com.google.code.gson/gson"
    }
    maven {       
        name = "guava"
        url "https://mvnrepository.com/artifact/com.google.guava"
    }
    maven {       
        name = "log4j-api"
        url "https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api"
    }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:sponge-mixin:${project.spongemix_version}"
    include(modImplementation("me.lucko:fabric-permissions-api:0.2-SNAPSHOT"))
    
    implementation "com.google.inject:guice:${project.guice_version}"
    implementation "org.spongepowered:spongeapi:${project.sponge_version}"
    implementation("com.github.ben-manes.caffeine:caffeine:3.1.6")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("com.google.guava:guava:31.1-jre")
    implementation("org.apache.logging.log4j:log4j-api:2.20.0")




	modCompileOnly "net.fabricmc:fabric-loader:${project.loader_version}"
	modCompileOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    compileOnly("javax.validation:validation-api:${project.validation}")

	// Remap a mod from maven and apply to gradle's compileOnlyApi configuration
	modCompileOnlyApi "org.yaml:snakeyaml:${project.snake_version}"

	// Remap a mod from maven and apply to gradle's runtimeOnly configuration
	modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}" 
	modRuntimeOnly "org.yaml:snakeyaml:${project.snake_version}" 

	// Remap a mod from maven and apply to loom's localRuntime configuration.
	// Behaves like runtimeOnly but is not exposed in to dependents. A bit like testRuntimeOnly but for mods.
	//modLocalRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}"
    inputs.property "mcversion", getProjectProperty('minecraft_version')
    inputs.property "modid", getProjectProperty('m_id')
    inputs.property "description", getProjectProperty('m_description')
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {

        // replace version and mcversion
        expand 'version': "${getProjectProperty('m_major')}.${getProjectProperty('m_minor')}", 'mcversion': getProjectProperty('minecraft_version')
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
    }
    from 'LICENSE.txt'
}

signing {
    required { Project.hasProperty("signing.keyId") }
    sign configurations.archives, configurations.shadow
}

idea {
    module {
        inheritOutputDirs = true
    }
}

def String getProjectProperty(String propertyName) {
    String temp = "null"
    if (hasProperty(propertyName)) {
        temp = this.properties[propertyName]
        project.logger.log(LogLevel.WARN, "Found property: " + propertyName+" value: " + temp)
    } else {
        project.logger.log(LogLevel.ERROR, "Property (" + propertyName + ") not found!")
    }
    return temp
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

}
build.dependsOn(shadowJar)